package com.vector.onetodo.db.gen;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ASSIGN.
 */
public class Assign {

    private Long id;
    private long friends_id;
    private long todo_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AssignDao myDao;

    private Assign assign;
    private Long assign__resolvedKey;

    private List<Assign> assignList;

    public Assign() {
    }

    public Assign(Long id) {
        this.id = id;
    }

    public Assign(Long id, long friends_id, long todo_id) {
        this.id = id;
        this.friends_id = friends_id;
        this.todo_id = todo_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAssignDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getFriends_id() {
        return friends_id;
    }

    public void setFriends_id(long friends_id) {
        this.friends_id = friends_id;
    }

    public long getTodo_id() {
        return todo_id;
    }

    public void setTodo_id(long todo_id) {
        this.todo_id = todo_id;
    }

    /** To-one relationship, resolved on first access. */
    public Assign getAssign() {
        long __key = this.todo_id;
        if (assign__resolvedKey == null || !assign__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssignDao targetDao = daoSession.getAssignDao();
            Assign assignNew = targetDao.load(__key);
            synchronized (this) {
                assign = assignNew;
            	assign__resolvedKey = __key;
            }
        }
        return assign;
    }

    public void setAssign(Assign assign) {
        if (assign == null) {
            throw new DaoException("To-one property 'todo_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.assign = assign;
            todo_id = assign.getId();
            assign__resolvedKey = todo_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Assign> getAssignList() {
        if (assignList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssignDao targetDao = daoSession.getAssignDao();
            List<Assign> assignListNew = targetDao._queryAssign_AssignList(id);
            synchronized (this) {
                if(assignList == null) {
                    assignList = assignListNew;
                }
            }
        }
        return assignList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssignList() {
        assignList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package com.vector.onetodo.db.gen;

import java.util.List;
import com.vector.onetodo.db.gen.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FRIENDS.
 */
public class Friends {

    private Long id;
    private String fname;
    private String lname;
    private String email;
    private String uu_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FriendsDao myDao;

    private List<Share> shareList;
    private List<Assign> assignList;

    public Friends() {
    }

    public Friends(Long id) {
        this.id = id;
    }

    public Friends(Long id, String fname, String lname, String email, String uu_id) {
        this.id = id;
        this.fname = fname;
        this.lname = lname;
        this.email = email;
        this.uu_id = uu_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFriendsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFname() {
        return fname;
    }

    public void setFname(String fname) {
        this.fname = fname;
    }

    public String getLname() {
        return lname;
    }

    public void setLname(String lname) {
        this.lname = lname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getUu_id() {
        return uu_id;
    }

    public void setUu_id(String uu_id) {
        this.uu_id = uu_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Share> getShareList() {
        if (shareList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShareDao targetDao = daoSession.getShareDao();
            List<Share> shareListNew = targetDao._queryFriends_ShareList(id);
            synchronized (this) {
                if(shareList == null) {
                    shareList = shareListNew;
                }
            }
        }
        return shareList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetShareList() {
        shareList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Assign> getAssignList() {
        if (assignList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssignDao targetDao = daoSession.getAssignDao();
            List<Assign> assignListNew = targetDao._queryFriends_AssignList(id);
            synchronized (this) {
                if(assignList == null) {
                    assignList = assignListNew;
                }
            }
        }
        return assignList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssignList() {
        assignList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

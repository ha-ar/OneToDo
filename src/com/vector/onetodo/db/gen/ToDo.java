package com.vector.onetodo.db.gen;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TO_DO.
 */
public class ToDo {

    private Long id;
    private String title;
    private Long start_date;
    private Long start_time;
    private Long end_date;
    private Long end_time;
    private Long repeat;
    private String notes;
    private Boolean is_allday;
    private Boolean is_delayed;
    private Boolean is_priority;
    private Boolean is_align;
    private Boolean is_shared;
    private Boolean is_done;
    private String location;
    private long label_id;
    private long reminder_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ToDoDao myDao;

    private Label label;
    private Long label__resolvedKey;

    private Reminder reminder;
    private Long reminder__resolvedKey;

    private List<CheckList> checkListList;

    public ToDo() {
    }

    public ToDo(Long id) {
        this.id = id;
    }

    public ToDo(Long id, String title, Long start_date, Long start_time, Long end_date, Long end_time, Long repeat, String notes, Boolean is_allday, Boolean is_delayed, Boolean is_priority, Boolean is_align, Boolean is_shared, Boolean is_done, String location, long label_id, long reminder_id) {
        this.id = id;
        this.title = title;
        this.start_date = start_date;
        this.start_time = start_time;
        this.end_date = end_date;
        this.end_time = end_time;
        this.repeat = repeat;
        this.notes = notes;
        this.is_allday = is_allday;
        this.is_delayed = is_delayed;
        this.is_priority = is_priority;
        this.is_align = is_align;
        this.is_shared = is_shared;
        this.is_done = is_done;
        this.location = location;
        this.label_id = label_id;
        this.reminder_id = reminder_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getToDoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Long getStart_date() {
        return start_date;
    }

    public void setStart_date(Long start_date) {
        this.start_date = start_date;
    }

    public Long getStart_time() {
        return start_time;
    }

    public void setStart_time(Long start_time) {
        this.start_time = start_time;
    }

    public Long getEnd_date() {
        return end_date;
    }

    public void setEnd_date(Long end_date) {
        this.end_date = end_date;
    }

    public Long getEnd_time() {
        return end_time;
    }

    public void setEnd_time(Long end_time) {
        this.end_time = end_time;
    }

    public Long getRepeat() {
        return repeat;
    }

    public void setRepeat(Long repeat) {
        this.repeat = repeat;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Boolean getIs_allday() {
        return is_allday;
    }

    public void setIs_allday(Boolean is_allday) {
        this.is_allday = is_allday;
    }

    public Boolean getIs_delayed() {
        return is_delayed;
    }

    public void setIs_delayed(Boolean is_delayed) {
        this.is_delayed = is_delayed;
    }

    public Boolean getIs_priority() {
        return is_priority;
    }

    public void setIs_priority(Boolean is_priority) {
        this.is_priority = is_priority;
    }

    public Boolean getIs_align() {
        return is_align;
    }

    public void setIs_align(Boolean is_align) {
        this.is_align = is_align;
    }

    public Boolean getIs_shared() {
        return is_shared;
    }

    public void setIs_shared(Boolean is_shared) {
        this.is_shared = is_shared;
    }

    public Boolean getIs_done() {
        return is_done;
    }

    public void setIs_done(Boolean is_done) {
        this.is_done = is_done;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public long getLabel_id() {
        return label_id;
    }

    public void setLabel_id(long label_id) {
        this.label_id = label_id;
    }

    public long getReminder_id() {
        return reminder_id;
    }

    public void setReminder_id(long reminder_id) {
        this.reminder_id = reminder_id;
    }

    /** To-one relationship, resolved on first access. */
    public Label getLabel() {
        long __key = this.label_id;
        if (label__resolvedKey == null || !label__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelDao targetDao = daoSession.getLabelDao();
            Label labelNew = targetDao.load(__key);
            synchronized (this) {
                label = labelNew;
            	label__resolvedKey = __key;
            }
        }
        return label;
    }

    public void setLabel(Label label) {
        if (label == null) {
            throw new DaoException("To-one property 'label_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.label = label;
            label_id = label.getId();
            label__resolvedKey = label_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Reminder getReminder() {
        long __key = this.reminder_id;
        if (reminder__resolvedKey == null || !reminder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReminderDao targetDao = daoSession.getReminderDao();
            Reminder reminderNew = targetDao.load(__key);
            synchronized (this) {
                reminder = reminderNew;
            	reminder__resolvedKey = __key;
            }
        }
        return reminder;
    }

    public void setReminder(Reminder reminder) {
        if (reminder == null) {
            throw new DaoException("To-one property 'reminder_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.reminder = reminder;
            reminder_id = reminder.getId();
            reminder__resolvedKey = reminder_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CheckList> getCheckListList() {
        if (checkListList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CheckListDao targetDao = daoSession.getCheckListDao();
            List<CheckList> checkListListNew = targetDao._queryToDo_CheckListList(id);
            synchronized (this) {
                if(checkListList == null) {
                    checkListList = checkListListNew;
                }
            }
        }
        return checkListList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCheckListList() {
        checkListList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
